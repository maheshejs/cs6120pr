-------------------------------
FUNCTION: ack
-------------------------------
  op: const
  op: const
  op: eq
  op: br
  label: m_zero
  op: add
  op: ret
  label: m_nonzero
  op: eq
  op: br
  label: n_zero
  op: sub
  op: call
  op: ret
  label: n_nonzero
  op: sub
  op: sub
  op: call
  op: call
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, eq, br, 
1:	m_zero, add, ret, 
2:	m_nonzero, eq, br, 
3:	n_zero, sub, call, ret, 
4:	n_nonzero, sub, sub, call, call, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: add
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, add, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  op: call
  op: id
  label: loop
  op: gt
  op: br
  label: body
  op: call
  op: call
  op: add
  op: div
  op: jmp
  label: done
  op: eq
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, const, call, id, 
1:	loop, gt, br, 
2:	body, call, call, add, div, jmp, 
3:	done, eq, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: getDigits
-------------------------------
  op: const
  op: const
  op: const
  op: div
  op: eq
  op: br
  label: then
  op: ret
  label: else
  op: call
  op: add
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, div, eq, br, 
1:	then, ret, 
2:	else, call, add, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: power
-------------------------------
  op: const
  op: const
  op: const
  op: const
  label: loop
  op: eq
  op: br
  label: body
  op: mul
  op: sub
  op: jmp
  label: done
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, const, 
1:	loop, eq, br, 
2:	body, mul, sub, jmp, 
3:	done, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: lsb
-------------------------------
  op: const
  op: call
  op: ret
------------
BASIC BLOCKS
------------
0:	const, call, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: square
-------------------------------
  op: mul
  op: ret
------------
BASIC BLOCKS
------------
0:	mul, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: mul
  op: const
  op: id
  label: loop.branch
  op: lt
  op: br
  label: loop.body
  op: call
  op: call
  op: call
  op: print
  op: const
  op: add
  op: jmp
  label: loop.end
------------
BASIC BLOCKS
------------
0:	mul, const, id, 
1:	loop.branch, lt, br, 
2:	loop.body, call, call, call, print, const, add, jmp, 
3:	loop.end, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
------------
BASIC BLOCKS
------------
0:	call, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: printBinary
-------------------------------
  op: const
  op: eq
  op: br
  label: rec
  op: const
  op: call
  op: div
  op: call
  op: print
  label: end
------------
BASIC BLOCKS
------------
0:	const, eq, br, 
1:	rec, const, call, div, call, print, 
2:	end, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	const, call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: is_even
-------------------------------
  op: const
  op: div
  op: mul
  op: eq
  op: ret
------------
BASIC BLOCKS
------------
0:	const, div, mul, eq, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: bin_pow
-------------------------------
  op: const
  op: const
  op: const
  op: eq
  op: br
  label: then.0
  op: ret
  label: else.0
  op: call
  op: br
  label: then.1
  op: mul
  op: div
  op: call
  op: ret
  label: else.1
  op: sub
  op: mul
  op: call
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, eq, br, 
1:	then.0, ret, 
2:	else.0, call, br, 
3:	then.1, mul, div, call, ret, 
4:	else.1, sub, mul, call, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
	}
}
-------------------------------
FUNCTION: pow
-------------------------------
  op: id
  op: const
  op: eq
  op: br
  label: then.0
  op: id
  op: ret
  label: else.0
  op: id
  op: id
  op: const
  op: div
  op: call
  op: id
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: const
  op: call
  op: const
  op: eq
  op: br
  label: then.12
  op: id
  op: id
  op: mul
  op: id
  op: jmp
  label: else.12
  op: id
  op: id
  label: endif.12
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, eq, br, 
1:	then.0, id, ret, 
2:	else.0, id, id, const, div, call, id, id, id, mul, id, id, const, call, const, eq, br, 
3:	then.12, id, id, mul, id, jmp, 
4:	else.12, id, id, 
5:	endif.12, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node5 [];
		node4 -> node5 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: id
  op: id
  op: id
  op: div
  op: id
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, id, div, id, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: LEFTSHIFT
-------------------------------
  op: const
  op: id
  op: call
  op: id
  op: id
  op: id
  op: mul
  op: ret
------------
BASIC BLOCKS
------------
0:	const, id, call, id, id, id, mul, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: RIGHTSHIFT
-------------------------------
  op: const
  op: id
  op: call
  op: id
  op: id
  op: id
  op: div
  op: ret
------------
BASIC BLOCKS
------------
0:	const, id, call, id, id, id, div, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: id
  op: call
  op: print
  op: id
  op: id
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	id, id, call, print, id, id, call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: mod2
-------------------------------
  op: const
  op: div
  op: mul
  op: sub
  op: const
  op: eq
  op: ret
------------
BASIC BLOCKS
------------
0:	const, div, mul, sub, const, eq, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: loop_subroutine
-------------------------------
  op: const
  op: const
  op: const
  op: const
  op: const
  op: const
  label: loop
  op: le
  op: br
  label: here
  op: call
  op: call
  op: and
  op: br
  label: doOr
  op: or
  label: stay
  op: br
  label: add
  op: add
  label: end_loop
  op: div
  op: div
  op: mul
  op: add
  op: jmp
  label: end
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, const, const, const, 
1:	loop, le, br, 
2:	here, call, call, and, br, 
3:	doOr, or, 
4:	stay, br, 
5:	add, add, 
6:	end_loop, div, div, mul, add, jmp, 
7:	end, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node7 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
		node4 -> node5 [];
		node4 -> node6 [];
		node5 -> node6 [];
		node6 -> node1 [];
	}
}
-------------------------------
FUNCTION: OR
-------------------------------
  op: const
  op: call
  op: ret
------------
BASIC BLOCKS
------------
0:	const, call, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: AND
-------------------------------
  op: const
  op: call
  op: ret
------------
BASIC BLOCKS
------------
0:	const, call, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: XOR
-------------------------------
  op: call
  op: call
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	call, call, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: sub
  op: id
  op: lt
  op: eq
  op: gt
  op: br
  label: useless_lbl
  op: br
  label: and_op
  op: call
  op: jmp
  label: or_op
  op: call
  op: jmp
  label: xor_op
  op: call
  label: end
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, sub, id, lt, eq, gt, br, 
1:	useless_lbl, br, 
2:	and_op, call, jmp, 
3:	or_op, call, jmp, 
4:	xor_op, call, 
5:	end, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node3 [];
		node1 -> node4 [];
		node2 -> node5 [];
		node3 -> node5 [];
		node4 -> node5 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: catalan
-------------------------------
  op: const
  op: const
  op: eq
  op: br
  label: if
  op: ret
  label: else
  op: id
  op: id
  op: sub
  label: while
  op: le
  op: br
  label: while.body
  op: sub
  op: call
  op: call
  op: mul
  op: add
  op: add
  op: jmp
  label: while.end
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, eq, br, 
1:	if, ret, 
2:	else, id, id, sub, 
3:	while, le, br, 
4:	while.body, sub, call, call, mul, add, add, jmp, 
5:	while.end, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
		node3 -> node4 [];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node3 -> node5 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  label: for.cond.1
  op: id
  op: id
  op: lt
  op: br
  label: for.body.1
  op: id
  op: call
  op: id
  op: id
  op: br
  label: then.7
  op: const
  op: print
  op: const
  op: jmp
  label: else.7
  op: const
  op: print
  op: const
  label: endif.7
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.1
------------
BASIC BLOCKS
------------
0:	const, id, 
1:	for.cond.1, id, id, lt, br, 
2:	for.body.1, id, call, id, id, br, 
3:	then.7, const, print, const, jmp, 
4:	else.7, const, print, const, 
5:	endif.7, id, const, add, id, jmp, 
6:	for.end.1, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node6 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node5 [];
		node4 -> node5 [];
		node5 -> node1 [];
	}
}
-------------------------------
FUNCTION: checkPrime
-------------------------------
  op: id
  op: const
  op: le
  op: br
  label: then.0
  op: const
  op: ret
  label: else.0
  label: endif.0
  op: const
  op: id
  label: for.cond.5
  op: id
  op: id
  op: lt
  op: br
  label: for.body.5
  op: id
  op: id
  op: div
  op: id
  op: id
  op: id
  op: mul
  op: id
  op: eq
  op: id
  op: id
  op: br
  label: then.18
  op: const
  op: ret
  label: else.18
  label: endif.18
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.5
  op: const
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, le, br, 
1:	then.0, const, ret, 
2:	else.0, endif.0, const, id, 
3:	for.cond.5, id, id, lt, br, 
4:	for.body.5, id, id, div, id, id, id, mul, id, eq, id, id, br, 
5:	then.18, const, ret, 
6:	else.18, endif.18, id, const, add, id, jmp, 
7:	for.end.5, const, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node3 -> node4 [];
		node3 -> node7 [];
		node4 -> node5 [];
		node4 -> node6 [];
		node5 -> node6 [];
		node6 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  op: jmp
  label: cond
  op: eq
  op: br
  label: loop
  op: div
  op: mul
  op: eq
  op: br
  label: even
  op: div
  op: jmp
  label: odd
  op: mul
  op: add
  label: print
  op: print
  op: jmp
  label: end
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, jmp, 
1:	cond, eq, br, 
2:	loop, div, mul, eq, br, 
3:	even, div, jmp, 
4:	odd, mul, add, 
5:	print, print, jmp, 
6:	end, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node5 [];
		node1 -> node2 [];
		node1 -> node6 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node5 [];
		node4 -> node5 [];
		node5 -> node1 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: combo
-------------------------------
  op: const
  op: const
  op: lt
  op: lt
  op: or
  op: br
  label: negatives
  op: ret
  label: natural
  op: eq
  op: br
  label: zeroes
  op: ret
  label: positive
  op: lt
  op: br
  label: valid
  op: call
  op: call
  op: sub
  op: call
  op: mul
  op: div
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, lt, lt, or, br, 
1:	negatives, ret, 
2:	natural, eq, br, 
3:	zeroes, ret, 
4:	positive, lt, br, 
5:	valid, call, call, sub, call, mul, div, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
		node4 -> node1 [];
		node4 -> node5 [];
	}
}
-------------------------------
FUNCTION: factorial
-------------------------------
  op: const
  op: eq
  op: br
  label: base
  op: ret
  label: recurs
  op: sub
  op: call
  op: mul
  op: ret
------------
BASIC BLOCKS
------------
0:	const, eq, br, 
1:	base, ret, 
2:	recurs, sub, call, mul, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  op: id
  op: const
  op: call
  op: id
  op: id
  op: const
  op: call
  op: id
  op: id
  op: const
  op: call
  op: id
  op: id
  op: const
  op: eq
  op: br
  label: then.18
  op: const
  op: id
  op: jmp
  label: else.18
  op: id
  op: const
  op: eq
  op: br
  label: then.23
  op: const
  op: id
  op: jmp
  label: else.23
  op: id
  op: const
  op: eq
  op: br
  label: then.28
  op: const
  op: id
  op: jmp
  label: else.28
  label: endif.28
  label: endif.23
  label: endif.18
  op: id
  op: const
  op: div
  op: id
  op: const
  op: id
  op: const
  op: id
  label: for.cond.37
  op: id
  op: const
  op: gt
  op: br
  label: for.body.37
  op: id
  op: id
  op: add
  op: const
  op: call
  op: id
  op: id
  op: const
  op: eq
  op: br
  label: then.46
  op: id
  op: const
  op: mul
  op: const
  op: sub
  op: id
  op: jmp
  label: else.46
  label: endif.46
  op: id
  op: const
  op: sub
  op: id
  op: jmp
  label: for.end.37
  op: id
  op: const
  op: call
  op: id
  op: id
  op: id
  op: add
  op: id
  op: const
  op: div
  op: add
  op: id
  op: const
  op: id
  op: id
  op: const
  op: eq
  op: br
  label: then.68
  op: const
  op: id
  op: jmp
  label: else.68
  op: id
  op: const
  op: eq
  op: br
  label: then.73
  op: const
  op: id
  op: jmp
  label: else.73
  op: id
  op: const
  op: eq
  op: br
  label: then.78
  op: const
  op: id
  op: jmp
  label: else.78
  op: id
  op: const
  op: eq
  op: br
  label: then.83
  op: const
  op: id
  op: jmp
  label: else.83
  op: id
  op: const
  op: eq
  op: br
  label: then.88
  op: const
  op: id
  op: jmp
  label: else.88
  op: id
  op: const
  op: eq
  op: br
  label: then.93
  op: const
  op: id
  op: jmp
  label: else.93
  op: id
  op: const
  op: eq
  op: br
  label: then.98
  op: const
  op: id
  op: jmp
  label: else.98
  op: id
  op: const
  op: eq
  op: br
  label: then.103
  op: const
  op: id
  op: jmp
  label: else.103
  op: id
  op: const
  op: eq
  op: br
  label: then.108
  op: const
  op: id
  op: jmp
  label: else.108
  op: id
  op: const
  op: eq
  op: br
  label: then.113
  op: const
  op: id
  op: jmp
  label: else.113
  op: id
  op: const
  op: eq
  op: br
  label: then.118
  op: const
  op: id
  op: jmp
  label: else.118
  op: const
  op: id
  label: endif.118
  label: endif.113
  label: endif.108
  label: endif.103
  label: endif.98
  label: endif.93
  label: endif.88
  label: endif.83
  label: endif.78
  label: endif.73
  label: endif.68
  op: id
  op: id
  op: add
  op: id
  op: add
  op: id
  op: const
  op: id
  op: id
  op: const
  op: eq
  op: br
  label: then.130
  op: id
  op: const
  op: eq
  op: br
  label: then.134
  op: id
  op: const
  op: sub
  op: const
  op: call
  op: id
  op: jmp
  label: else.134
  op: id
  op: const
  op: eq
  op: br
  label: then.143
  op: id
  op: const
  op: sub
  op: const
  op: call
  op: id
  op: jmp
  label: else.143
  op: id
  op: const
  op: call
  op: id
  label: endif.143
  label: endif.134
  op: jmp
  label: else.130
  op: id
  op: const
  op: call
  op: id
  label: endif.130
  op: id
  op: const
  op: add
  op: const
  op: call
  op: const
  op: add
  op: id
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	const, id, id, const, call, id, id, const, call, id, id, const, call, id, id, const, eq, br, 
1:	then.18, const, id, jmp, 
2:	else.18, id, const, eq, br, 
3:	then.23, const, id, jmp, 
4:	else.23, id, const, eq, br, 
5:	then.28, const, id, jmp, 
6:	else.28, endif.28, endif.23, endif.18, id, const, div, id, const, id, const, id, 
7:	for.cond.37, id, const, gt, br, 
8:	for.body.37, id, id, add, const, call, id, id, const, eq, br, 
9:	then.46, id, const, mul, const, sub, id, jmp, 
10:	else.46, endif.46, id, const, sub, id, jmp, 
11:	for.end.37, id, const, call, id, id, id, add, id, const, div, add, id, const, id, id, const, eq, br, 
12:	then.68, const, id, jmp, 
13:	else.68, id, const, eq, br, 
14:	then.73, const, id, jmp, 
15:	else.73, id, const, eq, br, 
16:	then.78, const, id, jmp, 
17:	else.78, id, const, eq, br, 
18:	then.83, const, id, jmp, 
19:	else.83, id, const, eq, br, 
20:	then.88, const, id, jmp, 
21:	else.88, id, const, eq, br, 
22:	then.93, const, id, jmp, 
23:	else.93, id, const, eq, br, 
24:	then.98, const, id, jmp, 
25:	else.98, id, const, eq, br, 
26:	then.103, const, id, jmp, 
27:	else.103, id, const, eq, br, 
28:	then.108, const, id, jmp, 
29:	else.108, id, const, eq, br, 
30:	then.113, const, id, jmp, 
31:	else.113, id, const, eq, br, 
32:	then.118, const, id, jmp, 
33:	else.118, const, id, 
34:	endif.118, endif.113, endif.108, endif.103, endif.98, endif.93, endif.88, endif.83, endif.78, endif.73, endif.68, id, id, add, id, add, id, const, id, id, const, eq, br, 
35:	then.130, id, const, eq, br, 
36:	then.134, id, const, sub, const, call, id, jmp, 
37:	else.134, id, const, eq, br, 
38:	then.143, id, const, sub, const, call, id, jmp, 
39:	else.143, id, const, call, id, 
40:	endif.143, endif.134, jmp, 
41:	else.130, id, const, call, id, 
42:	endif.130, id, const, add, const, call, const, add, id, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	node8 [label="8"];
	node9 [label="9"];
	node10 [label="10"];
	node11 [label="11"];
	node12 [label="12"];
	node13 [label="13"];
	node14 [label="14"];
	node15 [label="15"];
	node16 [label="16"];
	node17 [label="17"];
	node18 [label="18"];
	node19 [label="19"];
	node20 [label="20"];
	node21 [label="21"];
	node22 [label="22"];
	node23 [label="23"];
	node24 [label="24"];
	node25 [label="25"];
	node26 [label="26"];
	node27 [label="27"];
	node28 [label="28"];
	node29 [label="29"];
	node30 [label="30"];
	node31 [label="31"];
	node32 [label="32"];
	node33 [label="33"];
	node34 [label="34"];
	node35 [label="35"];
	node36 [label="36"];
	node37 [label="37"];
	node38 [label="38"];
	node39 [label="39"];
	node40 [label="40"];
	node41 [label="41"];
	node42 [label="42"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node6 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node6 [];
		node4 -> node5 [];
		node4 -> node6 [];
		node5 -> node6 [];
		node6 -> node7 [];
		node7 -> node8 [];
		node7 -> node11 [];
		node8 -> node9 [];
		node8 -> node10 [];
		node9 -> node10 [];
		node10 -> node7 [];
		node11 -> node12 [];
		node11 -> node13 [];
		node12 -> node34 [];
		node13 -> node14 [];
		node13 -> node15 [];
		node14 -> node34 [];
		node15 -> node16 [];
		node15 -> node17 [];
		node16 -> node34 [];
		node17 -> node18 [];
		node17 -> node19 [];
		node18 -> node34 [];
		node19 -> node20 [];
		node19 -> node21 [];
		node20 -> node34 [];
		node21 -> node22 [];
		node21 -> node23 [];
		node22 -> node34 [];
		node23 -> node24 [];
		node23 -> node25 [];
		node24 -> node34 [];
		node25 -> node26 [];
		node25 -> node27 [];
		node26 -> node34 [];
		node27 -> node28 [];
		node27 -> node29 [];
		node28 -> node34 [];
		node29 -> node30 [];
		node29 -> node31 [];
		node30 -> node34 [];
		node31 -> node32 [];
		node31 -> node33 [];
		node32 -> node34 [];
		node33 -> node34 [];
		node34 -> node35 [];
		node34 -> node41 [];
		node35 -> node36 [];
		node35 -> node37 [];
		node36 -> node40 [];
		node37 -> node38 [];
		node37 -> node39 [];
		node38 -> node40 [];
		node39 -> node40 [];
		node40 -> node42 [];
		node41 -> node42 [];
	}
}
-------------------------------
FUNCTION: modulo
-------------------------------
  op: id
  op: id
  op: div
  op: id
  op: id
  op: id
  op: id
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, div, id, id, id, id, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: id
  op: call
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	id, id, call, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: count_path
-------------------------------
  op: id
  op: const
  op: eq
  op: br
  label: then.0
  op: const
  op: ret
  label: else.0
  op: id
  op: const
  op: eq
  op: br
  label: then.5
  op: const
  op: ret
  label: else.5
  op: id
  op: const
  op: sub
  op: id
  op: call
  op: id
  op: id
  op: const
  op: sub
  op: call
  op: add
  op: id
  op: const
  op: sub
  op: id
  op: const
  op: sub
  op: call
  op: add
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, eq, br, 
1:	then.0, const, ret, 
2:	else.0, id, const, eq, br, 
3:	then.5, const, ret, 
4:	else.5, id, const, sub, id, call, id, id, const, sub, call, add, id, const, sub, id, const, sub, call, add, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  label: begin
  op: call
  op: div
  op: add
  label: check_result
  op: print
  op: call
  op: br
  label: process_result
  op: call
  op: div
  op: add
  op: jmp
  label: check_done
  op: eq
  op: br
  label: done
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	begin, call, div, add, 
2:	check_result, print, call, br, 
3:	process_result, call, div, add, jmp, 
4:	check_done, eq, br, 
5:	done, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
		node2 -> node3 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node2 -> node4 [];
		node4 -> node1 [];
		node4 -> node5 [];
	}
}
-------------------------------
FUNCTION: is_single_digit
-------------------------------
  op: const
  op: const
  op: div
  op: mul
  op: eq
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, div, mul, eq, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: peel_last_digit
-------------------------------
  op: const
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	const, div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  op: const
  op: id
  op: id
  op: id
  op: call
  op: id
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	const, id, const, id, id, id, call, id, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: id
  op: id
  op: id
  op: div
  op: id
  op: mul
  op: sub
  op: id
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, id, div, id, mul, sub, id, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: gcd
-------------------------------
  op: const
  op: id
  op: id
  op: id
  op: eq
  op: id
  op: not
  op: id
  label: for.cond.5
  op: id
  op: br
  label: for.body.5
  op: id
  op: id
  op: id
  op: id
  op: call
  op: id
  op: id
  op: id
  op: id
  op: id
  op: eq
  op: id
  op: not
  op: id
  op: jmp
  label: for.end.5
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	const, id, id, id, eq, id, not, id, 
1:	for.cond.5, id, br, 
2:	for.body.5, id, id, id, id, call, id, id, id, id, id, eq, id, not, id, jmp, 
3:	for.end.5, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	call, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: fact
-------------------------------
  op: id
  op: const
  op: eq
  op: br
  label: then.0
  op: const
  op: ret
  label: else.0
  op: id
  op: id
  op: const
  op: sub
  op: call
  op: mul
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, eq, br, 
1:	then.0, const, ret, 
2:	else.0, id, id, const, sub, call, mul, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  label: loopcheck
  op: lt
  op: br
  label: loopbody
  op: div
  op: mul
  op: sub
  op: eq
  op: br
  label: ifyes
  op: print
  op: div
  op: jmp
  label: ifno
  op: add
  op: jmp
  label: loopend
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	loopcheck, lt, br, 
2:	loopbody, div, mul, sub, eq, br, 
3:	ifyes, print, div, jmp, 
4:	ifno, add, jmp, 
5:	loopend, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node1 [];
		node4 -> node1 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	id, call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: fib
-------------------------------
  op: id
  op: const
  op: eq
  op: br
  label: then.0
  op: const
  op: ret
  label: else.0
  op: id
  op: const
  op: eq
  op: br
  label: then.5
  op: const
  op: ret
  label: else.5
  op: id
  op: const
  op: sub
  op: call
  op: id
  op: id
  op: const
  op: sub
  op: call
  op: id
  op: id
  op: id
  op: add
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, eq, br, 
1:	then.0, const, ret, 
2:	else.0, id, const, eq, br, 
3:	then.5, const, ret, 
4:	else.5, id, const, sub, call, id, id, const, sub, call, id, id, id, add, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: fitsInside
-------------------------------
  op: le
  op: le
  op: and
  op: le
  op: le
  op: and
  op: or
  op: ret
------------
BASIC BLOCKS
------------
0:	le, le, and, le, le, and, or, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  label: for.cond.0
  op: id
  op: lt
  op: br
  label: for.body.0
  op: id
  op: const
  op: div
  op: id
  op: id
  op: const
  op: mul
  op: id
  op: eq
  op: id
  op: id
  op: const
  op: div
  op: id
  op: id
  op: const
  op: mul
  op: id
  op: eq
  op: id
  op: id
  op: br
  label: then.21
  op: id
  op: br
  label: then.23
  op: const
  op: const
  op: sub
  op: print
  op: const
  op: jmp
  label: else.23
  op: const
  op: const
  op: sub
  op: print
  op: const
  label: endif.23
  op: jmp
  label: else.21
  op: id
  op: br
  label: then.33
  op: const
  op: const
  op: sub
  op: print
  op: const
  op: jmp
  label: else.33
  op: id
  op: print
  op: const
  label: endif.33
  label: endif.21
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.0
------------
BASIC BLOCKS
------------
0:	const, id, 
1:	for.cond.0, id, lt, br, 
2:	for.body.0, id, const, div, id, id, const, mul, id, eq, id, id, const, div, id, id, const, mul, id, eq, id, id, br, 
3:	then.21, id, br, 
4:	then.23, const, const, sub, print, const, jmp, 
5:	else.23, const, const, sub, print, const, 
6:	endif.23, jmp, 
7:	else.21, id, br, 
8:	then.33, const, const, sub, print, const, jmp, 
9:	else.33, id, print, const, 
10:	endif.33, endif.21, id, const, add, id, jmp, 
11:	for.end.0, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	node8 [label="8"];
	node9 [label="9"];
	node10 [label="10"];
	node11 [label="11"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node11 [];
		node2 -> node3 [];
		node2 -> node7 [];
		node3 -> node4 [];
		node3 -> node5 [];
		node4 -> node6 [];
		node5 -> node6 [];
		node6 -> node10 [];
		node7 -> node8 [];
		node7 -> node9 [];
		node8 -> node10 [];
		node9 -> node10 [];
		node10 -> node1 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  op: id
  label: cmp.val
  op: lt
  op: br
  label: if.1
  op: sub
  op: jmp
  label: else.1
  op: sub
  op: jmp
  label: loop.bound
  op: eq
  op: br
  label: update.val
  op: br
  label: if.2
  op: id
  op: jmp
  label: else.2
  op: id
  op: jmp
  label: program.end
  op: print
------------
BASIC BLOCKS
------------
0:	const, id, id, 
1:	cmp.val, lt, br, 
2:	if.1, sub, jmp, 
3:	else.1, sub, jmp, 
4:	loop.bound, eq, br, 
5:	update.val, br, 
6:	if.2, id, jmp, 
7:	else.2, id, jmp, 
8:	program.end, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	node8 [label="8"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
		node4 -> node5 [];
		node4 -> node8 [];
		node5 -> node6 [];
		node5 -> node7 [];
		node6 -> node1 [];
		node7 -> node1 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  label: row_loop
  op: const
  op: add
  op: lt
  op: br
  label: col_loop
  op: const
  op: add
  op: const
  op: lt
  op: br
  label: inner_loop
  op: add
  op: lt
  op: br
  label: multiply
  op: call
  op: call
  op: mul
  op: add
  op: jmp
  label: end_col
  op: call
  op: br
  label: add_dp
  op: call
  op: call
  op: add
  op: jmp
  label: return
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	row_loop, const, add, lt, br, 
2:	col_loop, const, add, const, lt, br, 
3:	inner_loop, add, lt, br, 
4:	multiply, call, call, mul, add, jmp, 
5:	end_col, call, br, 
6:	add_dp, call, call, add, jmp, 
7:	return, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
		node3 -> node4 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node7 [];
		node2 -> node3 [];
		node3 -> node5 [];
		node5 -> node2 [];
		node5 -> node6 [];
		node6 -> node2 [];
	}
}
-------------------------------
FUNCTION: mat_bitsel
-------------------------------
  op: call
  op: call
  op: br
  label: ret_one
  op: const
  op: ret
  label: ret_zero
  op: const
  op: ret
------------
BASIC BLOCKS
------------
0:	call, call, br, 
1:	ret_one, const, ret, 
2:	ret_zero, const, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: mat_packed_index
-------------------------------
  op: mul
  op: add
  op: ret
------------
BASIC BLOCKS
------------
0:	mul, add, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: pow2
-------------------------------
  op: const
  op: const
  op: const
  op: const
  label: loop
  op: lt
  op: br
  label: multiply
  op: mul
  op: add
  op: jmp
  label: return
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, const, 
1:	loop, lt, br, 
2:	multiply, mul, add, jmp, 
3:	return, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: bitsel
-------------------------------
  op: const
  op: const
  op: const
  label: loop
  op: eq
  op: br
  label: divide
  op: div
  op: sub
  op: jmp
  label: return
  op: call
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	loop, eq, br, 
2:	divide, div, sub, jmp, 
3:	return, call, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: abs
-------------------------------
  op: const
  op: lt
  op: br
  label: negative
  op: sub
  label: positive
  op: ret
------------
BASIC BLOCKS
------------
0:	const, lt, br, 
1:	negative, sub, 
2:	positive, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: is_even
-------------------------------
  op: call
  op: const
  op: const
  op: add
  op: div
  op: div
  op: eq
  op: ret
------------
BASIC BLOCKS
------------
0:	call, const, const, add, div, div, eq, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: is_odd
-------------------------------
  op: call
  op: not
  op: ret
------------
BASIC BLOCKS
------------
0:	call, not, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  label: loop
  op: lt
  op: br
  label: body
  op: mul
  op: add
  op: jmp
  label: done
  op: sub
  op: mul
  op: sub
  op: div
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	loop, lt, br, 
2:	body, mul, add, jmp, 
3:	done, sub, mul, sub, div, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: lsb
-------------------------------
  op: const
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	const, div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: hamm_lsb
-------------------------------
  op: const
  op: const
  op: call
  op: call
  op: add
  op: eq
  op: br
  label: if
  op: ret
  label: else
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, call, call, add, eq, br, 
1:	if, ret, 
2:	else, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  label: while
  op: eq
  op: eq
  op: and
  op: br
  label: body
  op: call
  op: add
  op: div
  op: div
  op: jmp
  label: end
  op: print
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	while, eq, eq, and, br, 
2:	body, call, add, div, div, jmp, 
3:	end, print, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: hanoi
-------------------------------
  op: const
  op: gt
  op: br
  label: then
  op: const
  op: sub
  op: call
  op: print
  op: call
  label: else
  op: ret
------------
BASIC BLOCKS
------------
0:	const, gt, br, 
1:	then, const, sub, call, print, call, 
2:	else, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  op: call
------------
BASIC BLOCKS
------------
0:	const, const, const, call, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: id
  op: print
------------
BASIC BLOCKS
------------
0:	call, id, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: is_decreasing
-------------------------------
  op: id
  op: const
  op: const
  op: mul
  op: id
  label: label4
  op: const
  op: gt
  op: br
  label: label5
  op: call
  op: id
  op: lt
  op: br
  label: label11
  op: const
  op: ret
  op: jmp
  label: label12
  op: jmp
  label: label13
  op: id
  op: const
  op: div
  op: id
  op: jmp
  label: label6
  op: const
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, const, mul, id, 
1:	label4, const, gt, br, 
2:	label5, call, id, lt, br, 
3:	label11, const, ret, 
4:	jmp, 
5:	label12, jmp, 
6:	label13, id, const, div, id, jmp, 
7:	label6, const, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node7 [];
		node2 -> node3 [];
		node2 -> node5 [];
		node3 -> node4 [];
		node4 -> node6 [];
		node5 -> node6 [];
		node6 -> node1 [];
	}
}
-------------------------------
FUNCTION: last_digit
-------------------------------
  op: const
  op: div
  op: const
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	const, div, const, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: karatsuba
-------------------------------
  op: const
  op: const
  op: const
  op: call
  op: call
  op: eq
  op: eq
  op: or
  op: br
  label: then
  op: mul
  op: jmp
  label: else
  op: call
  op: div
  op: call
  op: div
  op: call
  op: div
  op: call
  op: call
  op: add
  op: add
  op: call
  op: call
  op: mul
  op: call
  op: mul
  op: sub
  op: sub
  op: mul
  op: add
  op: add
  op: jmp
  label: end
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, call, call, eq, eq, or, br, 
1:	then, mul, jmp, 
2:	else, call, div, call, div, call, div, call, call, add, add, call, call, mul, call, mul, sub, sub, mul, add, add, jmp, 
3:	end, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node3 [];
		node2 -> node3 [];
	}
}
-------------------------------
FUNCTION: num_digits
-------------------------------
  op: const
  op: const
  op: id
  op: id
  label: while.cond
  op: div
  op: lt
  op: br
  label: while.body
  op: add
  op: mul
  op: jmp
  label: while.finish
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, id, id, 
1:	while.cond, div, lt, br, 
2:	while.body, add, mul, jmp, 
3:	while.finish, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: max
-------------------------------
  op: gt
  op: br
  label: then
  op: ret
  label: else
  op: ret
------------
BASIC BLOCKS
------------
0:	gt, br, 
1:	then, ret, 
2:	else, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: pow
-------------------------------
  op: id
  op: id
  op: const
  op: id
  label: for.cond.1
  op: id
  op: id
  op: const
  op: sub
  op: lt
  op: br
  label: for.body.1
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.1
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, const, id, 
1:	for.cond.1, id, id, const, sub, lt, br, 
2:	for.body.1, id, id, mul, id, id, const, add, id, jmp, 
3:	for.end.1, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: gt
  op: br
  label: then.1
  op: id
  op: jmp
  label: else.1
  label: endif.1
  label: foreverloop
  op: call
  op: call
  op: const
  op: eq
  op: eq
  op: and
  op: br
  label: then.2
  op: print
  op: jmp
  label: else.2
  op: const
  op: add
  op: jmp
  label: loopend
------------
BASIC BLOCKS
------------
0:	id, gt, br, 
1:	then.1, id, jmp, 
2:	else.1, endif.1, foreverloop, call, call, const, eq, eq, and, br, 
3:	then.2, print, jmp, 
4:	else.2, const, add, jmp, 
5:	loopend, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
		node2 -> node4 [];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node3 -> node5 [];
	}
}
-------------------------------
FUNCTION: getMod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: const
  op: id
  op: id
  op: id
  label: for.cond.2
  op: id
  op: const
  op: gt
  op: br
  label: for.body.2
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: const
  op: sub
  op: id
  op: jmp
  label: for.end.2
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	id, const, id, id, id, 
1:	for.cond.2, id, const, gt, br, 
2:	for.body.2, id, id, mul, id, id, const, sub, id, jmp, 
3:	for.end.2, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: mccarthy91
-------------------------------
  op: const
  op: const
  op: const
  op: gt
  op: br
  label: big
  op: sub
  op: ret
  label: small
  op: add
  op: call
  op: call
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, gt, br, 
1:	big, sub, ret, 
2:	small, add, call, call, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  op: id
  op: id
  op: sub
  op: id
  op: const
  op: id
  op: id
  op: id
  op: const
  op: id
  label: for.cond.6
  op: id
  op: const
  op: gt
  op: br
  label: for.body.6
  op: id
  op: id
  op: id
  op: div
  op: id
  op: mul
  op: eq
  op: br
  label: then.11
  op: jmp
  label: else.11
  op: id
  op: id
  op: mul
  op: id
  op: call
  op: id
  label: endif.11
  op: id
  op: id
  op: mul
  op: id
  op: call
  op: id
  op: id
  op: id
  op: div
  op: id
  op: jmp
  label: for.end.6
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	const, id, id, id, sub, id, const, id, id, id, const, id, 
1:	for.cond.6, id, const, gt, br, 
2:	for.body.6, id, id, id, div, id, mul, eq, br, 
3:	then.11, jmp, 
4:	else.11, id, id, mul, id, call, id, 
5:	endif.11, id, id, mul, id, call, id, id, id, div, id, jmp, 
6:	for.end.6, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node6 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node5 [];
		node4 -> node5 [];
		node5 -> node1 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: id
  op: id
  op: id
  op: div
  op: id
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, id, div, id, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: mod_pow
-------------------------------
  op: id
  op: const
  op: eq
  op: br
  label: then.0
  op: const
  op: ret
  label: else.0
  op: const
  op: id
  op: id
  op: id
  op: call
  op: id
  op: id
  op: id
  label: for.cond.8
  op: id
  op: const
  op: gt
  op: br
  label: for.body.8
  op: id
  op: const
  op: call
  op: id
  op: id
  op: const
  op: eq
  op: br
  label: then.15
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: id
  op: call
  op: id
  op: jmp
  label: else.15
  label: endif.15
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: id
  op: call
  op: id
  op: id
  op: const
  op: div
  op: id
  op: jmp
  label: for.end.8
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, eq, br, 
1:	then.0, const, ret, 
2:	else.0, const, id, id, id, call, id, id, id, 
3:	for.cond.8, id, const, gt, br, 
4:	for.body.8, id, const, call, id, id, const, eq, br, 
5:	then.15, id, id, mul, id, id, id, call, id, jmp, 
6:	else.15, endif.15, id, id, mul, id, id, id, call, id, id, const, div, id, jmp, 
7:	for.end.8, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node3 -> node4 [];
		node3 -> node7 [];
		node4 -> node5 [];
		node4 -> node6 [];
		node5 -> node6 [];
		node6 -> node3 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: id
  op: id
  op: id
  op: div
  op: id
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, id, div, id, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: mul
  op: call
  op: mul
  op: add
  op: div
  op: ge
  op: br
  label: then
  op: sub
  op: print
  label: else
  op: print
------------
BASIC BLOCKS
------------
0:	call, mul, call, mul, add, div, ge, br, 
1:	then, sub, print, 
2:	else, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: abs
-------------------------------
  op: const
  op: lt
  op: br
  label: mul_neg_one
  op: const
  op: mul
  label: abs_res
  op: ret
------------
BASIC BLOCKS
------------
0:	const, lt, br, 
1:	mul_neg_one, const, mul, 
2:	abs_res, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: gcd
-------------------------------
  label: while.cond
  op: call
  op: const
  op: eq
  op: br
  label: while.body
  op: id
  op: id
  op: jmp
  label: while.finish
  op: ret
------------
BASIC BLOCKS
------------
0:	while.cond, call, const, eq, br, 
1:	while.body, id, id, jmp, 
2:	while.finish, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
		node0 -> node1 [];
	}
	subgraph D {
		node0 -> node2 [];
	}
}
-------------------------------
FUNCTION: lcm
-------------------------------
  op: const
  op: eq
  op: br
  label: check_b
  op: eq
  op: br
  label: special_case
  op: ret
  label: is_good
  op: mul
  op: call
  op: call
  op: div
  op: ret
------------
BASIC BLOCKS
------------
0:	const, eq, br, 
1:	check_b, eq, br, 
2:	special_case, ret, 
3:	is_good, mul, call, call, div, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node3 [];
		node1 -> node2 [];
		node1 -> node3 [];
		node2 -> node3 [];
	}
}
-------------------------------
FUNCTION: orders
-------------------------------
  label: for.cond
  op: eq
  op: br
  label: for.body
  op: br
  label: lcm
  op: call
  op: div
  op: jmp
  label: gcd
  op: call
  op: div
  label: for.body.print
  op: print
  op: const
  op: add
  op: jmp
  label: for.finish
  op: ret
------------
BASIC BLOCKS
------------
0:	for.cond, eq, br, 
1:	for.body, br, 
2:	lcm, call, div, jmp, 
3:	gcd, call, div, 
4:	for.body.print, print, const, add, jmp, 
5:	for.finish, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node5 [];
		node1 -> node2 [];
		node1 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
		node4 -> node0 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: call
  op: print
  op: call
------------
BASIC BLOCKS
------------
0:	const, const, call, print, call, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  op: const
  op: const
  label: for.cond
  op: br
  label: for.body
  op: call
  op: div
  op: eq
  op: br
  label: if.true
  op: const
  op: jmp
  label: if.false
  op: add
  op: jmp
  label: for.end
  op: sub
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, const, const, const, 
1:	for.cond, br, 
2:	for.body, call, div, eq, br, 
3:	if.true, const, jmp, 
4:	if.false, add, jmp, 
5:	for.end, sub, call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node1 [];
		node4 -> node1 [];
	}
}
-------------------------------
FUNCTION: pow
-------------------------------
  op: const
  op: const
  op: const
  op: const
  label: for.cond.pow
  op: br
  label: for.body.pow
  op: eq
  op: br
  label: if.true.pow
  op: const
  op: jmp
  label: if.false.pow
  op: mul
  op: sub
  op: jmp
  label: for.end.pow
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, const, 
1:	for.cond.pow, br, 
2:	for.body.pow, eq, br, 
3:	if.true.pow, const, jmp, 
4:	if.false.pow, mul, sub, jmp, 
5:	for.end.pow, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node1 [];
		node4 -> node1 [];
	}
}
-------------------------------
FUNCTION: palindrome
-------------------------------
  op: const
  op: const
  op: const
  op: const
  op: le
  op: br
  label: if.true.palindrome
  op: const
  op: jmp
  label: if.false.palindrome
  op: call
  op: div
  op: div
  op: mul
  op: sub
  op: eq
  op: br
  label: if.true.mirror
  op: mul
  op: sub
  op: sub
  op: div
  op: sub
  op: call
  op: jmp
  label: if.false.mirror
  op: const
  op: jmp
  label: if.end.palindrome
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, const, le, br, 
1:	if.true.palindrome, const, jmp, 
2:	if.false.palindrome, call, div, div, mul, sub, eq, br, 
3:	if.true.mirror, mul, sub, sub, div, sub, call, jmp, 
4:	if.false.mirror, const, jmp, 
5:	if.end.palindrome, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node5 [];
		node4 -> node5 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  op: id
  op: call
  op: const
------------
BASIC BLOCKS
------------
0:	const, id, id, call, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: generateNthRow
-------------------------------
  op: const
  op: id
  op: id
  op: print
  op: const
  op: const
  op: id
  label: for.cond.3
  op: id
  op: id
  op: lt
  op: br
  label: for.body.3
  op: id
  op: id
  op: sub
  op: id
  op: id
  op: const
  op: add
  op: id
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: print
  op: const
  op: id
  op: id
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.3
------------
BASIC BLOCKS
------------
0:	const, id, id, print, const, const, id, 
1:	for.cond.3, id, id, lt, br, 
2:	for.body.3, id, id, sub, id, id, const, add, id, id, id, mul, id, id, print, const, id, id, id, const, add, id, jmp, 
3:	for.end.3, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: const
  op: const
  op: const
  op: id
  op: id
  op: id
  label: for.cond.1
  op: mul
  op: gt
  op: br
  label: for.body
  op: div
  op: mul
  op: sub
  op: eq
  op: br
  label: if.body
  op: add
  op: add
  label: for.incre
  op: add
  op: jmp
  label: for.end
  op: eq
  op: br
  label: if.success
  op: id
  label: if.failure.end
  op: print
------------
BASIC BLOCKS
------------
0:	id, const, const, const, id, id, id, 
1:	for.cond.1, mul, gt, br, 
2:	for.body, div, mul, sub, eq, br, 
3:	if.body, add, add, 
4:	for.incre, add, jmp, 
5:	for.end, eq, br, 
6:	if.success, id, 
7:	if.failure.end, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
		node4 -> node1 [];
		node5 -> node6 [];
		node5 -> node7 [];
		node6 -> node7 [];
	}
}
-------------------------------
FUNCTION: permutation
-------------------------------
  op: id
  op: id
  op: gt
  op: br
  label: then.0
  op: const
  op: ret
  label: else.0
  op: id
  op: call
  op: id
  op: id
  op: sub
  op: call
  op: div
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, gt, br, 
1:	then.0, const, ret, 
2:	else.0, id, call, id, id, sub, call, div, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: factorial
-------------------------------
  op: id
  op: const
  op: sub
  op: id
  label: for.cond.0
  op: id
  op: const
  op: gt
  op: br
  label: for.body.0
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: const
  op: sub
  op: id
  op: jmp
  label: for.end.0
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, sub, id, 
1:	for.cond.0, id, const, gt, br, 
2:	for.body.0, id, id, mul, id, id, const, sub, id, jmp, 
3:	for.end.0, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: id
  op: call
  op: id
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	id, id, call, id, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  label: for.outer.init
  op: const
  op: lt
  op: br
  label: true
  op: const
  op: jmp
  label: false
  op: id
  label: for.outer.cond
  op: le
  op: br
  label: for.outer.body
  op: const
  op: eq
  label: for.inner.init
  op: const
  op: const
  label: for.inner.cond
  op: div
  op: le
  op: br
  label: for.inner.body
  op: call
  op: const
  op: eq
  op: br
  label: if.inner.body
  op: const
  op: const
  op: eq
  op: jmp
  label: if.inner.end
  op: const
  op: add
  op: jmp
  label: for.inner.end
  op: const
  op: add
  op: br
  label: if.outer.body
  op: print
  label: if.outer.end
  op: const
  op: add
  op: jmp
  label: for.outer.end
------------
BASIC BLOCKS
------------
0:	for.outer.init, const, lt, br, 
1:	true, const, jmp, 
2:	false, id, 
3:	for.outer.cond, le, br, 
4:	for.outer.body, const, eq, 
5:	for.inner.init, const, const, 
6:	for.inner.cond, div, le, br, 
7:	for.inner.body, call, const, eq, br, 
8:	if.inner.body, const, const, eq, jmp, 
9:	if.inner.end, const, add, jmp, 
10:	for.inner.end, const, add, br, 
11:	if.outer.body, print, 
12:	if.outer.end, const, add, jmp, 
13:	for.outer.end, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	node8 [label="8"];
	node9 [label="9"];
	node10 [label="10"];
	node11 [label="11"];
	node12 [label="12"];
	node13 [label="13"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node3 [];
		node2 -> node3 [];
		node3 -> node4 [];
		node3 -> node13 [];
		node4 -> node5 [];
		node5 -> node6 [];
		node6 -> node7 [];
		node6 -> node10 [];
		node7 -> node8 [];
		node7 -> node9 [];
		node8 -> node10 [];
		node9 -> node6 [];
		node10 -> node11 [];
		node10 -> node12 [];
		node11 -> node12 [];
		node12 -> node3 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: mul
  op: id
  label: outer_loop
  op: id
  label: inner_loop
  op: mul
  op: mul
  op: add
  op: eq
  op: br
  label: found
  op: print
  label: inner_continue
  op: add
  op: ge
  op: br
  label: outer_continue
  op: add
  op: ge
  op: br
  label: finish
------------
BASIC BLOCKS
------------
0:	const, mul, id, 
1:	outer_loop, id, 
2:	inner_loop, mul, mul, add, eq, br, 
3:	found, print, 
4:	inner_continue, add, ge, br, 
5:	outer_continue, add, ge, br, 
6:	finish, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	subgraph U {
		edge [dir=none];
		node2 -> node4 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node3 -> node4 [];
		node4 -> node5 [];
		node5 -> node1 [];
		node5 -> node6 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
------------
BASIC BLOCKS
------------
0:	call, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: sqrt
-------------------------------
  op: const
  op: id
  label: for.cond.0
  op: id
  op: id
  op: const
  op: sub
  op: lt
  op: br
  label: for.body.0
  op: id
  op: id
  op: mul
  op: id
  op: ge
  op: br
  label: then.7
  op: id
  op: ret
  label: else.7
  label: endif.7
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.0
  op: const
  op: ret
------------
BASIC BLOCKS
------------
0:	const, id, 
1:	for.cond.0, id, id, const, sub, lt, br, 
2:	for.body.0, id, id, mul, id, ge, br, 
3:	then.7, id, ret, 
4:	else.7, endif.7, id, const, add, id, jmp, 
5:	for.end.0, const, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
		node4 -> node1 [];
	}
}
-------------------------------
FUNCTION: quadratic
-------------------------------
  op: id
  op: id
  op: mul
  op: const
  op: id
  op: mul
  op: id
  op: mul
  op: sub
  op: id
  op: const
  op: id
  op: mul
  op: id
  op: const
  op: id
  op: sub
  op: id
  op: call
  op: add
  op: id
  op: const
  op: id
  op: sub
  op: id
  op: call
  op: sub
  op: id
  op: id
  op: id
  op: div
  op: print
  op: const
  op: id
  op: id
  op: div
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	id, id, mul, const, id, mul, id, mul, sub, id, const, id, mul, id, const, id, sub, id, call, add, id, const, id, sub, id, call, sub, id, id, id, div, print, const, id, id, div, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: id
  op: call
  op: id
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	id, id, call, id, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: fac
-------------------------------
  op: id
  op: const
  op: le
  op: br
  label: then.0
  op: const
  op: ret
  op: jmp
  label: else.0
  label: endif.0
  op: id
  op: id
  op: const
  op: sub
  op: call
  op: mul
  op: id
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, le, br, 
1:	then.0, const, ret, 
2:	jmp, 
3:	else.0, endif.0, id, id, const, sub, call, mul, id, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node3 [];
		node1 -> node2 [];
		node2 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: call
  op: sub
  op: gt
  op: br
  label: flip
  op: const
  op: mul
  label: end
  op: print
------------
BASIC BLOCKS
------------
0:	call, call, sub, gt, br, 
1:	flip, const, mul, 
2:	end, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: area
-------------------------------
  op: mul
  op: print
  op: ret
------------
BASIC BLOCKS
------------
0:	mul, print, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  op: id
  op: call
  op: const
------------
BASIC BLOCKS
------------
0:	const, id, id, call, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: id
  op: id
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: gcd
-------------------------------
  op: id
  op: id
  op: gt
  op: br
  label: then.0
  op: id
  op: id
  op: id
  op: id
  op: id
  op: id
  op: jmp
  label: else.0
  label: endif.0
  op: id
  op: const
  op: eq
  op: br
  label: then.7
  op: id
  op: ret
  op: jmp
  label: else.7
  op: id
  op: const
  op: eq
  op: br
  label: then.12
  op: id
  op: ret
  op: jmp
  label: else.12
  label: endif.12
  label: endif.7
  op: id
  op: id
  op: call
  op: id
  op: id
  op: id
  op: call
  op: id
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	id, id, gt, br, 
1:	then.0, id, id, id, id, id, id, jmp, 
2:	else.0, endif.0, id, const, eq, br, 
3:	then.7, id, ret, 
4:	jmp, 
5:	else.7, id, const, eq, br, 
6:	then.12, id, ret, 
7:	jmp, 
8:	else.12, endif.12, endif.7, id, id, call, id, id, id, call, id, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	node8 [label="8"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node5 [];
		node3 -> node4 [];
		node4 -> node8 [];
		node5 -> node6 [];
		node5 -> node8 [];
		node6 -> node7 [];
		node7 -> node8 [];
	}
}
-------------------------------
FUNCTION: relative_primes
-------------------------------
  op: id
  op: id
  label: for.cond.0
  op: id
  op: const
  op: ge
  op: br
  label: for.body.0
  op: id
  op: id
  op: call
  op: id
  op: id
  op: const
  op: eq
  op: br
  label: then.7
  op: id
  op: print
  op: const
  op: jmp
  label: else.7
  label: endif.7
  op: id
  op: const
  op: sub
  op: id
  op: jmp
  label: for.end.0
------------
BASIC BLOCKS
------------
0:	id, id, 
1:	for.cond.0, id, const, ge, br, 
2:	for.body.0, id, id, call, id, id, const, eq, br, 
3:	then.7, id, print, const, jmp, 
4:	else.7, endif.7, id, const, sub, id, jmp, 
5:	for.end.0, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node4 [];
		node4 -> node1 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: const
  op: const
  op: id
  op: const
  op: id
  label: for.cond.3
  op: id
  op: br
  label: for.body.3
  op: id
  op: div
  op: mul
  op: sub
  op: mul
  op: add
  op: id
  op: eq
  op: br
  label: if.body
  op: const
  op: jmp
  label: for.incre
  op: jmp
  label: for.end.3
  op: print
------------
BASIC BLOCKS
------------
0:	id, const, const, id, const, id, 
1:	for.cond.3, id, br, 
2:	for.body.3, id, div, mul, sub, mul, add, id, eq, br, 
3:	if.body, const, jmp, 
4:	for.incre, jmp, 
5:	for.end.3, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node5 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node1 [];
		node4 -> node1 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: rot
-------------------------------
  op: const
  op: const
  op: add
  op: ge
  op: br
  label: if
  op: sub
  label: else
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, add, ge, br, 
1:	if, sub, 
2:	else, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: const
  op: add
  op: id
  op: id
  op: id
  op: eq
  op: br
  label: then.3
  op: id
  op: print
  op: const
  op: ret
  label: else.3
  op: id
  op: id
  op: add
  op: id
  op: id
  op: const
  op: div
  op: id
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: id
  op: le
  op: br
  label: then.18
  op: id
  op: id
  op: id
  op: call
  op: const
  op: jmp
  label: else.18
  op: id
  op: id
  op: id
  op: call
  op: const
  label: endif.18
------------
BASIC BLOCKS
------------
0:	id, const, add, id, id, id, eq, br, 
1:	then.3, id, print, const, ret, 
2:	else.3, id, id, add, id, id, const, div, id, id, id, mul, id, id, id, le, br, 
3:	then.18, id, id, id, call, const, jmp, 
4:	else.18, id, id, id, call, const, 
5:	endif.18, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node5 [];
		node4 -> node5 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  label: loop
  op: eq
  op: br
  label: body
  op: call
  op: div
  op: add
  op: jmp
  label: done
  op: print
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	loop, eq, br, 
2:	body, call, div, add, jmp, 
3:	done, print, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: const
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, const, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: call
  op: eq
  op: print
  op: print
  op: print
------------
BASIC BLOCKS
------------
0:	call, call, eq, print, print, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: sum_by_loop
-------------------------------
  op: const
  op: const
  op: const
  label: for_start
  op: le
  op: br
  label: for
  op: add
  op: add
  op: jmp
  label: end
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, const, 
1:	for_start, le, br, 
2:	for, add, add, jmp, 
3:	end, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: sum_by_formula
-------------------------------
  op: const
  op: const
  op: add
  op: mul
  op: div
  op: ret
------------
BASIC BLOCKS
------------
0:	const, const, add, mul, div, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: id
  label: for.cond.1
  op: id
  op: const
  op: gt
  op: br
  label: for.body.1
  op: id
  op: const
  op: div
  op: id
  op: id
  op: const
  op: id
  op: mul
  op: sub
  op: id
  op: id
  op: id
  op: add
  op: id
  op: id
  op: id
  op: jmp
  label: for.end.1
  op: id
  op: print
  op: const
------------
BASIC BLOCKS
------------
0:	const, id, 
1:	for.cond.1, id, const, gt, br, 
2:	for.body.1, id, const, div, id, id, const, id, mul, sub, id, id, id, add, id, id, id, jmp, 
3:	for.end.1, id, print, const, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: const
  op: const
  op: const
  op: lt
  op: br
  label: neg
  op: mul
  label: begin
  op: add
  op: mul
  op: gt
  op: br
  label: check
  op: call
  op: eq
  op: br
  label: body
  op: print
  op: add
  op: div
  op: eq
  op: br
  label: then
  op: print
  op: add
  op: jmp
  label: end
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, const, const, const, lt, br, 
1:	neg, mul, 
2:	begin, add, mul, gt, br, 
3:	check, call, eq, br, 
4:	body, print, add, div, eq, br, 
5:	then, print, add, jmp, 
6:	end, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	subgraph U {
		edge [dir=none];
		node2 -> node3 [];
	}
	subgraph D {
		node0 -> node1 [];
		node0 -> node2 [];
		node1 -> node2 [];
		node2 -> node6 [];
		node3 -> node4 [];
		node4 -> node2 [];
		node4 -> node5 [];
		node5 -> node2 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: const
  op: const
  op: id
  op: add
  op: mul
  op: div
  op: mul
  op: print
------------
BASIC BLOCKS
------------
0:	const, const, id, add, mul, div, mul, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: sumOfSquares
-------------------------------
  op: const
  op: id
  op: const
  op: id
  label: for.cond.1
  op: id
  op: id
  op: le
  op: br
  label: for.body.1
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: id
  op: add
  op: id
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.1
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	const, id, const, id, 
1:	for.cond.1, id, id, le, br, 
2:	for.body.1, id, id, mul, id, id, id, add, id, id, const, add, id, jmp, 
3:	for.end.1, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: squareOfSum
-------------------------------
  op: const
  op: id
  op: const
  op: id
  label: for.cond.1
  op: id
  op: id
  op: le
  op: br
  label: for.body.1
  op: id
  op: id
  op: add
  op: id
  op: id
  op: const
  op: add
  op: id
  op: jmp
  label: for.end.1
  op: id
  op: id
  op: mul
  op: id
  op: id
  op: ret
------------
BASIC BLOCKS
------------
0:	const, id, const, id, 
1:	for.cond.1, id, id, le, br, 
2:	for.body.1, id, id, add, id, id, const, add, id, jmp, 
3:	for.end.1, id, id, mul, id, id, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	subgraph U {
		edge [dir=none];
		node1 -> node2 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node3 [];
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: id
  op: call
  op: id
  op: id
  op: call
  op: id
  op: id
  op: id
  op: sub
  op: id
  op: id
  op: print
  op: const
  op: id
------------
BASIC BLOCKS
------------
0:	id, call, id, id, call, id, id, id, sub, id, id, print, const, id, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: print
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	print, call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: totient
-------------------------------
  op: id
  op: const
  op: const
  op: const
  label: for.set.cond
  op: mul
  op: le
  op: br
  label: for.set.body
  op: call
  op: eq
  op: br
  label: if_lbl
  label: while.set.cond
  op: call
  op: eq
  op: br
  label: while.body
  op: div
  op: id
  op: jmp
  label: while.end
  op: div
  op: sub
  label: else_lbl
  op: add
  op: jmp
  label: for.set.end
  op: gt
  op: br
  label: final_if_label
  op: div
  op: sub
  label: final_else_label
  op: ret
------------
BASIC BLOCKS
------------
0:	id, const, const, const, 
1:	for.set.cond, mul, le, br, 
2:	for.set.body, call, eq, br, 
3:	if_lbl, while.set.cond, call, eq, br, 
4:	while.body, div, id, jmp, 
5:	while.end, div, sub, 
6:	else_lbl, add, jmp, 
7:	for.set.end, gt, br, 
8:	final_if_label, div, sub, 
9:	final_else_label, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	node7 [label="7"];
	node8 [label="8"];
	node9 [label="9"];
	subgraph U {
		edge [dir=none];
		node3 -> node4 [];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node7 [];
		node2 -> node3 [];
		node2 -> node6 [];
		node3 -> node5 [];
		node5 -> node6 [];
		node6 -> node1 [];
		node7 -> node8 [];
		node7 -> node9 [];
		node8 -> node9 [];
	}
}
-------------------------------
FUNCTION: mod
-------------------------------
  op: div
  op: mul
  op: sub
  op: ret
------------
BASIC BLOCKS
------------
0:	div, mul, sub, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: main
-------------------------------
  op: call
  op: print
------------
BASIC BLOCKS
------------
0:	call, print, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
	}
}
-------------------------------
FUNCTION: up_arrow
-------------------------------
  op: const
  op: id
  op: const
  label: loopstart
  op: lt
  op: br
  label: loopbody
  op: le
  op: br
  label: base
  op: mul
  op: jmp
  label: arrowsgreaterthan1
  op: sub
  op: call
  label: finally
  op: add
  op: jmp
  label: endloop
  op: ret
------------
BASIC BLOCKS
------------
0:	const, id, const, 
1:	loopstart, lt, br, 
2:	loopbody, le, br, 
3:	base, mul, jmp, 
4:	arrowsgreaterthan1, sub, call, 
5:	finally, add, jmp, 
6:	endloop, ret, 
------------------
CONTROL-FLOW GRAPH
------------------
digraph G {
	node0 [label="0"];
	node1 [label="1"];
	node2 [label="2"];
	node3 [label="3"];
	node4 [label="4"];
	node5 [label="5"];
	node6 [label="6"];
	subgraph U {
		edge [dir=none];
	}
	subgraph D {
		node0 -> node1 [];
		node1 -> node2 [];
		node1 -> node6 [];
		node2 -> node3 [];
		node2 -> node4 [];
		node3 -> node5 [];
		node4 -> node5 [];
		node5 -> node1 [];
	}
}
